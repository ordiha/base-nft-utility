// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

interface IERC20 {
    function transfer(address to, uint256 amount) external returns (bool);
}

contract TokenVesting {
    address public token;
    address public beneficiary;
    uint256 public totalAmount;
    uint256 public released;
    uint256 public start;
    uint256 public duration;

    constructor(
        address _token,
        address _beneficiary,
        uint256 _amount,
        uint256 _start,
        uint256 _duration
    ) {
        token = _token;
        beneficiary = _beneficiary;
        totalAmount = _amount;
        start = _start;
        duration = _duration;
    }

    function releasable() public view returns (uint256) {
        if (block.timestamp < start) return 0;
        uint256 elapsed = block.timestamp - start;
        if (elapsed >= duration) return totalAmount - released;
        return (totalAmount * elapsed) / duration - released;
    }

    function release() external {
        uint256 amt = releasable();
        require(amt > 0, "nothing to release");
        released += amt;
        IERC20(token).transfer(beneficiary, amt);
    }
}
