// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

contract DonationTracker {
    address public owner;
    uint256 public totalDonations;
    mapping(address => uint256) public donations;

    event DonationReceived(address indexed donor, uint256 amount);
    event Withdraw(address indexed to, uint256 amount);

    modifier onlyOwner() {
        require(msg.sender == owner, "not owner");
        _;
    }

    constructor() {
        owner = msg.sender;
    }

    // anyone can donate
    function donate() external payable {
        require(msg.value > 0, "zero donation");
        donations[msg.sender] += msg.value;
        totalDonations += msg.value;
        emit DonationReceived(msg.sender, msg.value);
    }

    // withdraw collected funds
    function withdraw(address payable to, uint256 amount) external onlyOwner {
        require(amount <= address(this).balance, "insufficient");
        to.transfer(amount);
        emit Withdraw(to, amount);
    }

    // contract balance
    function contractBalance() external view returns (uint256) {
        return address(this).balance;
    }
}
